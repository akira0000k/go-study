package main
import (
	"fmt"
)

/*
   subject : slice append capacity    とほほのGo言語入門
 */ 
func main() {
	fmt.Println("Start")

	var a []int = []int{}
	//var a []int //ok
	//a := []int{}
	for i:=0; i<20; i++{
		a = append(a, i)
		fmt.Println(len(a), cap(a), a)
	}

	a = []int{5,5,5,5,5}
	fmt.Println(len(a), cap(a), a)
	for i:=0; i<20; i++{
		a = append(a, i)
		fmt.Println(len(a), cap(a), a)
	}

	a = []int{5,5,5,5,5}
	fmt.Println(len(a), cap(a), a)
	for i:=0; i<20; i++{
		if i < len(a) {
			a[i] = i
		} else {
			a = append(a, i)
		}
		fmt.Println(len(a), cap(a), a)
	}

	a = make([]int, 3, 5)
	fmt.Println(len(a), cap(a), a)
	for i:=0; i<20; i++{
		if i < len(a) {
			a[i] = i
		} else {
			a = append(a, i)
		}
		fmt.Println(len(a), cap(a), a)
	}

	b := a[3:5]
	fmt.Println(len(b), cap(b), b)
		
	b = a[3:5:5]
	fmt.Println(len(b), cap(b), b)
		
	b = a[3:5:10]
	fmt.Println(len(b), cap(b), b)
		
	b = a[10:]
	fmt.Println(len(b), cap(b), b)
		
	b = a[10:len(a)]
	fmt.Println(len(b), cap(b), b)
		
	b = a[10:len(a):20]
	fmt.Println(len(b), cap(b), b)

	//b = a[10:len(a):30]//panic: runtime error: slice bounds out of range [::30] with capacity 20
	//fmt.Println(len(b), cap(b), b)
	
	a = append(a, 20)
	fmt.Println(len(a), cap(a), a)
	b = a[10:12:cap(a)]
	fmt.Println(len(b), cap(b), b)
}
// -*- mode: compilation; default-directory: "~/go/src/practice/01practice/" -*-
// Compilation started at Sun Nov  7 00:07:36
//  
// go run practice14.go
// Start
// 1 1 [0]
// 2 2 [0 1]
// 3 4 [0 1 2]
// 4 4 [0 1 2 3]
// 5 8 [0 1 2 3 4]
// 6 8 [0 1 2 3 4 5]
// 7 8 [0 1 2 3 4 5 6]
// 8 8 [0 1 2 3 4 5 6 7]
// 9 16 [0 1 2 3 4 5 6 7 8]
// 10 16 [0 1 2 3 4 5 6 7 8 9]
// 11 16 [0 1 2 3 4 5 6 7 8 9 10]
// 12 16 [0 1 2 3 4 5 6 7 8 9 10 11]
// 13 16 [0 1 2 3 4 5 6 7 8 9 10 11 12]
// 14 16 [0 1 2 3 4 5 6 7 8 9 10 11 12 13]
// 15 16 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
// 16 16 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
// 17 32 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]
// 18 32 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]
// 19 32 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
// 20 32 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]
// 5 5 [5 5 5 5 5]
// 6 10 [5 5 5 5 5 0]
// 7 10 [5 5 5 5 5 0 1]
// 8 10 [5 5 5 5 5 0 1 2]
// 9 10 [5 5 5 5 5 0 1 2 3]
// 10 10 [5 5 5 5 5 0 1 2 3 4]
// 11 20 [5 5 5 5 5 0 1 2 3 4 5]
// 12 20 [5 5 5 5 5 0 1 2 3 4 5 6]
// 13 20 [5 5 5 5 5 0 1 2 3 4 5 6 7]
// 14 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8]
// 15 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9]
// 16 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10]
// 17 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11]
// 18 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12]
// 19 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13]
// 20 20 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
// 21 40 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
// 22 40 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]
// 23 40 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]
// 24 40 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
// 25 40 [5 5 5 5 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]
// 5 5 [5 5 5 5 5]
// 5 5 [0 5 5 5 5]
// 5 5 [0 1 5 5 5]
// 5 5 [0 1 2 5 5]
// 5 5 [0 1 2 3 5]
// 5 5 [0 1 2 3 4]
// 6 10 [0 1 2 3 4 5]
// 7 10 [0 1 2 3 4 5 6]
// 8 10 [0 1 2 3 4 5 6 7]
// 9 10 [0 1 2 3 4 5 6 7 8]
// 10 10 [0 1 2 3 4 5 6 7 8 9]
// 11 20 [0 1 2 3 4 5 6 7 8 9 10]
// 12 20 [0 1 2 3 4 5 6 7 8 9 10 11]
// 13 20 [0 1 2 3 4 5 6 7 8 9 10 11 12]
// 14 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13]
// 15 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
// 16 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
// 17 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]
// 18 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]
// 19 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
// 20 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]
// 3 5 [0 0 0]
// 3 5 [0 0 0]
// 3 5 [0 1 0]
// 3 5 [0 1 2]
// 4 5 [0 1 2 3]
// 5 5 [0 1 2 3 4]
// 6 10 [0 1 2 3 4 5]
// 7 10 [0 1 2 3 4 5 6]
// 8 10 [0 1 2 3 4 5 6 7]
// 9 10 [0 1 2 3 4 5 6 7 8]
// 10 10 [0 1 2 3 4 5 6 7 8 9]
// 11 20 [0 1 2 3 4 5 6 7 8 9 10]
// 12 20 [0 1 2 3 4 5 6 7 8 9 10 11]
// 13 20 [0 1 2 3 4 5 6 7 8 9 10 11 12]
// 14 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13]
// 15 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
// 16 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
// 17 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]
// 18 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]
// 19 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
// 20 20 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]
// 2 17 [3 4]
// 2 2 [3 4]
// 2 7 [3 4]
// 10 10 [10 11 12 13 14 15 16 17 18 19]
// 10 10 [10 11 12 13 14 15 16 17 18 19]
// 10 10 [10 11 12 13 14 15 16 17 18 19]
// 21 40 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]
// 2 30 [10 11]
//  
// Compilation finished at Sun Nov  7 00:07:36
